#pragma once
//#include <cstdarg>
namespace Eloquent {
    namespace ML {
        namespace Port {
            class SEFR {
                public:
                    /**
                    * Predict class for features vector
                    */
                    int predict(float *x) {
                        return dot(x,   -0.058167755249  , -0.059346898639  , -0.064357127994  , -0.103756288175  , -0.062860366441  , -0.035630487148  , -0.056835179748  , -0.037540223579  , -0.07919775335  , -0.066090434713  , -0.067381000004  , -0.042070162635  , -0.059273053245  , -0.080373287178  , -0.079311184126  , -0.050102522494  , -0.101835731148  , -0.10171678264  , -0.050377378374  , -0.122785995723  , -0.115524542753  , -0.088107530781  , -0.095835372402  , -0.033776264197  , -0.039310698336  , -0.176235174028  , -0.169713644667  , -0.122247193371  , 0.088478608865  , -0.1843977006  , -0.246999600522  , -0.151807072938  , -0.077320917708  , -0.13150318943  , -0.040118146806  , -0.15217136144  , 0.037803396635  , -0.002965429029  , -0.071776722557  , 0.18153989063  , -0.00516313079  , 0.109338155444  , 0.196906091532  , -0.004867686458  , -0.005640942591  , 0.06608681785  , -0.021338329986  , 0.094241533638  , -0.017361667306  , 0.034504825023  , 0.142266470217  , -0.044149582977  , 0.019226121886  , 0.100310833598  , -0.102557575048  , 0.109063474382  , -0.052154081461  , 0.153082641633  , 0.031599142054  , 0.05429155317  , 0.059164403303  , -0.008659068509  , -0.026913230267  , 0.010567810549  , -0.013026291742  , -0.006268869069  , 0.033738377254  , 0.007930546069  , 0.020865864105  , 0.019936155381  , -0.032508154158  , 0.003779350801  , -0.002040871998  , -0.044649084376  , 0.042323577513  , -0.065667292031  , -0.051285635976  , -0.039787163345  , -0.049647672639  , -0.032471540989  , -0.036406330466  , -0.027821719455  , -0.090689756842  , -0.046106954779  , -0.080540400748  , -0.097166245461  , 0.02019995112  , -0.030620902665  , -0.056329643836  , -0.098724941284  , 0.002112860095  , -0.030352574671  , -0.028989373916  , -0.065826403148  , -0.036521690856  , -0.039373487619  , -0.049435356932  , -0.024112278828  , -0.046889635108  , -0.031305872035  , -0.058652026282  , -0.066565484734  , -0.083939850751  , -0.062265144256  , -0.064957477528  , -0.069316008477  , -0.072423998728  , -0.055092645237  , -0.064726681415  , -0.082378628263  , -0.083220996578  , -0.05775755366  , -0.052784334657  , -0.059480278237  , -0.051915507626  , -0.053927620354  , -0.052854620578  , -0.057976370934  , -0.054260668449  , -0.060570811778  , -0.058535009317  , -0.056718948751  , -0.059351960904  , -0.061177744302  , -0.058736332358  , -0.058859960926  , -0.061313195111  , -0.056703266837 ) <= -2.5549770565413388 ? 0 : 1;
                    }

                    /**
                    * Predict readable class name
                    */
                    const char* predictLabel(float *x) {
                        return idxToLabel(predict(x));
                    }

                    /**
                    * Convert class idx to readable name
                    */
                    const char* idxToLabel(uint8_t classIdx) {
                        switch (classIdx) {
                            case 0:
                            return "on";
                            case 1:
                            return "off";
                            default:
                            return "Houston we have a problem";
                        }
                    }

                protected:
                    /**
                    * Compute dot product
                    */
                    float dot(float *x, ...) {
                        va_list w;
                        va_start(w, 128);
                        float dot = 0.0;

                        for (uint16_t i = 0; i < 128; i++) {
                            const float wi = va_arg(w, double);
                            dot += x[i] * wi;
                        }

                        return dot;
                    }
                };
            }
        }
    }
